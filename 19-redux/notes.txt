REDUX -> state management system for cross-component or app-wide state. Helps us manage state (data which when changed, should affect the UI).

Types of state: 

1. Local state -> belongs to a single component (e.g listening to user input on input field). It should be managed inside component via useState() / useReducer()

2. Cross-component state -> open / closed state of a modal overlay - modal might affect multiple component, but it can be closed inside that modal. Typically it requires 'prop-drilling' e.g variables, functions etc...

3. App-wide state - state affecting the entire app e.g authentication status or chosen theme -> typically requires 'prop drilling'

We simplified more complex state prop drilling problem with ContextAPI / Redux.



REDUX vs React Context API

Disadvantages of Context API :

1. Complex setup & management -> in more complex applications we could end up with deeply nested providers :

<AuthContextProvider>
    <ThemeContextProvider>
        <UIInteractionContextProvider>
            [...]

so we can have multiple pieces of contexts which affect components or whole app and therefore multiple context provider components. We of course can make some "AllContext.Provider" but it will be dificult to maintain.


2. Performance - contextApi is great for low frequency updates/changes. When changes happen more frequently, its performance can be poor - in enterprise like application, contextApi is not a good replacement for Flux-Like state propagation (Redux is flux-like state propagation library)



CORE REDUX CONCEPTS

1. Central Data (STATE) Store - we have one store for all state in entire app. We can store auth state, theming, input state etc... Data can be used inside of a components - when change occur in store, it will be known by the component. Components kinda like subscribe from the central data store. Whenever data changes, the store notifies components and then components can get the data they need (e.g current auth status) so they get a 'SLICE' of redux store, and therefore they can use it.

2. Changing data in the state - components NEVER DIRECTLY MANIPULATE THE STORE DATA. Components have a subscription, but data flow in opposite direction is not possible (at least direct data flow). The data is manipulated by using 'REDUCERS'. Reducer functions are responsible for mutating (changing store data) - it is not "useReducer()" hook which we used before - it is more general concept. Concept of reducers is to transform inputs and spit out a new result (e.g from list of numbers make total - it is simple example)


3. Connecting components to reducer functions - components should trigger data change (some click on a button). We connect that by using ACTIONS - components dispatch actions (they trigger certain actions). Action is a simple javascript object which describes the kind of operation the reducer should perform. Therefore redux then forwards action to the reducer, reads description of the desired operation - then this operation is performed by a reducer.

So components dispatch actions in which they describe what should be done (not directly) - then these actions are forwarded to the reducer - the reducer then does what the action wants reducer to do and then the reducer spits out the new state which effectively will replace the existing state in the central data store. And when that happens (data change in the store) the components which are subscribed to store, are notified so that they can update their UI.
 
